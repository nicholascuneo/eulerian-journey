"""
Project Euler Problem 12
========================

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
28. The first ten terms would be:

                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""


def triangle_with_divisors():
    """
    Finds the first triangular number that has over 500 divisors.

    A triangular number is the sum of the natural numbers up to a certain point.
    For example, the 7th triangular number is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

    Returns:
    The first triangular number with over 500 divisors as an integer.

    """
    natural_numbers = [1]  # Initialize list of natural numbers with first natural
    triangle_numbers = [1]  # Initialize list of triangle numbers with first triangle
    triangle_divisors = {1: [1]}  # Dict of triangle numbers to list of their divisors
    divisors = []  # Temp list to store divisors of current triangle number
    next_natural = 2  # Counter to track next natural number
    current_triangle = 1  # Most recently computed triangle number

    # Loop until a triangle number with more than 500 divisors is found
    while len(triangle_divisors[current_triangle]) <= 500:
        natural_numbers.append(next_natural)  # Append next natural number
        triangle = sum(natural_numbers)  # Compute next triangle number
        triangle_numbers.append(triangle)  # Append new triangle number

        # Find divisors of the triangle number
        for i in range(1, int(triangle**0.5) + 1):
            if triangle % i == 0:
                divisors.append(i)  # Add divisor
                if i != triangle // i:  # Avoid adding square root twice
                    divisors.append(triangle // i)  # Add the complementary divisor

        # Store divisors in dictionary
        triangle_divisors[triangle] = divisors

        # Reset divisor list for next triangle number
        divisors = []

        # Update current triangle number to the latest one
        current_triangle = triangle

        # Increment natural number counter
        next_natural += 1

    return current_triangle  # First triangle number with over 500 divisors


if __name__ == "__main__":
    print(triangle_with_divisors())
