"""
Project Euler Problem 12
========================

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
28. The first ten terms would be:

                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""


def solve():
    natural_nums = [1]
    triangle_nums = [1]
    triangle_nums_and_divisors = {1: [1]}
    divisors = []
    start = 2

    while len(triangle_nums_and_divisors) < 501:
        natural_nums.append(start)
        triangle = sum(natural_nums)
        triangle_nums.append(triangle)

        for i in range(1, triangle + 1):
            if triangle % i == 0:
                divisors.append(i)

        triangle_nums_and_divisors[triangle] = divisors
        divisors = []

        start += 1

    return triangle_nums_and_divisors


if __name__ == "__main__":
    print(solve())
